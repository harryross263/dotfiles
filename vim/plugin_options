" vim: ft=vim

" vim-airline
if !has('gui_running') && !has('win32')
	let g:airline_powerline_fonts=1
endif 
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#branch#empty_message='no repo'
let g:airline#extensions#hunks#enabled=0
let g:airline#extensions#whitespace#enabled=1
let g:airline#extensions#whitespace#mixed_indent_algo=1 "Tabs before spaces

"Tmuxline - :TmuxlineSnapshot! ~/.dotfiles/.tmuxline.tmux.conf
"Far bottom right shows DHCP WiFi IP, with an H appended at home
let g:tmuxline_preset = {
	\'a'       : '#S:#I',
	\'b disabled'       : '',
	\'c disabled'       : '',
	\'win'     : ['#I', '#W'],
	\'cwin'    : ['#I', '#W'],
	\'x'       : '#(~/.dotfiles/bin/tmux-battery)',
	\'y'       : ['%a', '%Y-%m-%d', '%l:%M%p'],
	\'z'       : ['#(whoami)', '#(~/.dotfiles/bin/getipfortmux || echo raspi)'],
	\'options' : {'status-justify': 'left'}}

"Promptline - :PromptlineSnapshot! ~/.dotfiles/.promptline.sh airline
"These functions disable the host and user when in tmux, as they are shown in
"  the bottom right corner of the window
fun! Promptline_host(...)
	" host is \h in bash, %m in zsh
	return '$([[ -n ${TMUX-} ]] && exit 1; [[ -n ${ZSH_VERSION-} ]] && print %m || printf "%s" \\h)'
endfun

fun! Promptline_user(...)
	" user is \u in bash, %n in zsh
	return '$([[ -n ${TMUX-} ]] && exit 1; [[ -n ${ZSH_VERSION-} ]] && print %n || printf "%s" \\u)'
endfun

let g:promptline_preset = {
	\'a': [ Promptline_host(), Promptline_user() ],
	\'b': [ promptline#slices#cwd({ 'dir_limit': 2 }) ],
	\'z': [ promptline#slices#vcs_branch(), promptline#slices#jobs() ],
	\'warn': [ promptline#slices#battery(), promptline#slices#last_exit_code() ]}
let promptline_theme = 'airline'

" move bufmru command off of space
let g:bufmru_switchkey = "<SNR>bufmru"

" fzf.vim options
let g:fzf_command_prefix = 'Fzf'
let g:fzf_layout = { 'down': '~40%' }

" VOoM
let g:voom_return_key = "<F2>"
let g:voom_tab_key    = "<S-Tab>"

" easy motion with just leader
let g:EasyMotion_leader_key = '<Leader>'

if !exists('g:netrw_list_hide')
  let g:netrw_list_hide=',.*\.cmx$,.*\.d$,.*\.cmt$,.*\.cmti$,.*\.a$,.*\.cmi$,.*\.o$,.*\.deps$,.*\.cmxa$,.*\.libdeps$,.*\.pack-order$,.*\.ml-gen$,.merlin$,.*\.stub.names$,.*\.modules$'
endif

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinition<CR>

" vim-pandoc
let g:pandoc#command#autoexec_on_writes = 1
let g:pandoc#command#autoexec_command = "Pandoc! pdf --include-in-header ~/.dotfiles/.pandoc_preamble"

